[{"content":"const ColorList = () => {\r\n  return (\r\n    <ul>\r\n      <li>red</li>\r\n      <li>blue</li>\r\n      <li>green</li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nrender(<ColorList />);\r\n","type":"code","id":"owmwc"},{"content":"import { render, screen } from \"@testing-library/react\";\r\n\r\ntest(\"getAllBy, queryAllBy, findAllBy \", async () => {\r\n  // render the ColorList\r\n  render(<ColorList />);\r\n\r\n  expect(screen.getAllByRole('listitem')).toHaveLength(3);\r\n  expect(screen.queryAllByRole('listitem')).toHaveLength(3);\r\n  expect(await screen.queryAllByRole('listitem')).toHaveLength(3);\r\n});\r\n    ","type":"code","id":"zv31f"},{"content":"import { render, screen } from \"@testing-library/react\";\r\n\r\ntest(\"favor using getBy to prove an element exists\", async () => {\r\n  // render the ColorList\r\n  render(<ColorList />);\r\n\r\n  const element = screen.getByRole('list');\r\n  expect(element).toBeInTheDocument();\r\n  \r\n});\r\n    ","type":"code","id":"7s107"},{"content":"import { render, screen } from \"@testing-library/react\";\r\n\r\ntest(\"favor using queryBy to prove an element does not exist\", async () => {\r\n  // render the ColorList\r\n  render(<ColorList />);\r\n\r\n  const element = screen.queryByRole('textbox');\r\n  expect(element).not.toBeInTheDocument();\r\n  \r\n});\r\n    ","type":"code","id":"pfofr"},{"content":"import { useState, useEffect } from \"react\";\r\n\r\nconst fakeFetchColors = () => {\r\n  return Promise.resolve([\"red\", \"green\", \"blue\"]);\r\n};\r\n\r\nconst LoadableColorList = () => {\r\n  const [colors, setColors] = useState([]);\r\n\r\n  useEffect(async () => {\r\n  \r\n    setColors(await fakeFetchColors())\r\n   \r\n  }, []);\r\n\r\n  const renderedColors = colors.map((color) => {\r\n    return <li key={color}>{color}</li>;\r\n  });\r\n\r\n  return <ul>{renderedColors}</ul>;\r\n};\r\n\r\nrender(<LoadableColorList />);\r\n","type":"code","id":"dmec7"},{"content":"import { render, screen } from \"@testing-library/react\";\r\n\r\ntest(\"favour findBy or findAllBy whhen data fetching\", async () => {\r\n  // render the LoadableColorList\r\n  render(<LoadableColorList />);\r\n\r\n \r\n  const elements = await screen.findAllByRole('listitem');\r\n  expect(elements).toHaveLength(3)\r\n\r\n\r\n  \r\n});","type":"code","id":"62938"}]